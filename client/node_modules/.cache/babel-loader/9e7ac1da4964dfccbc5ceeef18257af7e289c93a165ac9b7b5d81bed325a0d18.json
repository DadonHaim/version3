{"ast":null,"code":"import { UserClient } from \"../importAll\";\nconst reducers = {\n  set: (state, action) => {\n    state[action.payload.type] = action.payload.value;\n  },\n  setIsLogin: (state, action) => {\n    state.isLogin = action.payload;\n    if (action.payload == true) state.mainPage = \"Game\";else {\n      state.mainPage = \"Guest\";\n      state.subPage = \"Guest-Home\";\n      UserClient.KillToken();\n    }\n  },\n  setUser: (state, action) => {\n    state.user = action.payload;\n  },\n  setMainPage: (state, action) => {\n    state.mainPage = action.payload;\n    if (action.payload == \"Game\") state.subPage = \"Game-SelectAvatar\";\n    if (action.payload == \"Guest\") state.subPage = \"Guest-Home\";\n  },\n  setSubPage: (state, action) => {\n    state.subPage = action.payload;\n  },\n  setActiveAvatar: (state, action) => {\n    if (Object.keys(action.payload).length > 0) for (let key in action.payload) state.activeAvatar[key] = action.payload[key];else state.activeAvatar = action.payload;\n  },\n  setAllAvatars: (state, action) => {\n    state.allAvatars = action.payload;\n  },\n  setAvatarName: (state, action) => {\n    state.activeAvatar.name = action.payload;\n  },\n  setAvatarExp: (state, action) => {\n    state.activeAvatar.exp = action.payload;\n  },\n  setAvatarHp: (state, action) => {\n    state.activeAvatar.hp = action.payload;\n  },\n  setAvatarDamage: (state, action) => {\n    state.activeAvatar.damage = action.payload;\n  },\n  setAvatarEnergy: (state, action) => {\n    state.activeAvatar.energy = action.payload;\n  },\n  setAvatarRefillEnergy: (state, action) => {\n    state.activeAvatar.refillEnergy = action.payload;\n  },\n  setAvatarSilver: (state, action) => {\n    state.activeAvatar.silver = action.payload;\n  },\n  setAvatarGold: (state, action) => {\n    state.activeAvatar.gold = action.payload;\n  },\n  setAvatarRedPowder: (state, action) => {\n    state.activeAvatar.redPowder = action.payload;\n  },\n  setAvatarDiamond: (state, action) => {\n    state.activeAvatar.diamond = action.payload;\n  },\n  setMusic: (state, action) => {\n    state.music = action.payload;\n  },\n  setSound: (state, action) => {\n    state.sound = action.payload;\n  },\n  setAllSettings: (state, action) => {\n    for (let key in action.payload) state.settings[key] = action.payload[key];\n  }\n};\nexport default reducers;","map":{"version":3,"names":["UserClient","reducers","set","state","action","payload","type","value","setIsLogin","isLogin","mainPage","subPage","KillToken","setUser","user","setMainPage","setSubPage","setActiveAvatar","Object","keys","length","key","activeAvatar","setAllAvatars","allAvatars","setAvatarName","name","setAvatarExp","exp","setAvatarHp","hp","setAvatarDamage","damage","setAvatarEnergy","energy","setAvatarRefillEnergy","refillEnergy","setAvatarSilver","silver","setAvatarGold","gold","setAvatarRedPowder","redPowder","setAvatarDiamond","diamond","setMusic","music","setSound","sound","setAllSettings","settings"],"sources":["H:/Project/version3/client/src/Store/redusers.ts"],"sourcesContent":["import { AvatarClient, UserClient } from \"../importAll\";\r\nconst reducers = {\r\n    set : (state:IStore , action:{payload:{type:allStoreType,value:any}})=>{\r\n        state[action.payload.type] = action.payload.value ;\r\n    },\r\n    setIsLogin : (state:IStore , action:IAction<boolean>)=>{\r\n        state.isLogin   = action.payload;\r\n        if(action.payload == true)\r\n            state.mainPage  = \"Game\";\r\n        else{\r\n            state.mainPage  = \"Guest\";\r\n            state.subPage   = \"Guest-Home\";\r\n            UserClient.KillToken();\r\n        }\r\n    },\r\n    setUser     : (state:IStore , action:IAction<UserClient>)       => {\r\n        state.user     = action.payload\r\n    },\r\n    setMainPage : (state:IStore , action:IAction<AllMainPagesType>) => {\r\n        state.mainPage = action.payload;\r\n        if(action.payload == \"Game\")\r\n            state.subPage  = \"Game-SelectAvatar\"\r\n        if(action.payload == \"Guest\")\r\n            state.subPage  = \"Guest-Home\"\r\n    },\r\n    setSubPage            : (state:IStore , action:IAction<AllSubPagesType>)=> {\r\n        state.subPage  = action.payload\r\n    },\r\n    setActiveAvatar       : (state:IStore , action:IAction<AvatarClient>)   => {\r\n        if(Object.keys(action.payload).length>0)\r\n            for(let key in action.payload) state.activeAvatar[key] = action.payload[key];\r\n        else\r\n            state.activeAvatar = action.payload    \r\n    },\r\n\r\n    setAllAvatars         : (state:IStore , action:IAction<AvatarClient[]>) => {state.allAvatars                  = action.payload},\r\n    setAvatarName         : (state:IStore , action:IAction<string>)         => {state.activeAvatar.name           = action.payload},\r\n    setAvatarExp          : (state:IStore , action:IAction<number>)         => {state.activeAvatar.exp            = action.payload},\r\n    setAvatarHp           : (state:IStore , action:IAction<number>)         => {state.activeAvatar.hp             = action.payload},\r\n    setAvatarDamage       : (state:IStore , action:IAction<number>)         => {state.activeAvatar.damage         = action.payload},\r\n    setAvatarEnergy       : (state:IStore , action:IAction<number>)         => {state.activeAvatar.energy         = action.payload},\r\n    setAvatarRefillEnergy : (state:IStore , action:IAction<number>)         => {state.activeAvatar.refillEnergy   = action.payload},\r\n    setAvatarSilver       : (state:IStore , action:IAction<number>)         => {state.activeAvatar.silver         = action.payload},\r\n    setAvatarGold         : (state:IStore , action:IAction<number>)         => {state.activeAvatar.gold           = action.payload},\r\n    setAvatarRedPowder    : (state:IStore , action:IAction<number>)         => {state.activeAvatar.redPowder      = action.payload},\r\n    setAvatarDiamond      : (state:IStore , action:IAction<number>)         => {state.activeAvatar.diamond        = action.payload},\r\n    setMusic              : (state:IStore , action:IAction<boolean>)        => {state.music                       = action.payload},\r\n    setSound              : (state:IStore , action:IAction<boolean>)        => {state.sound                       = action.payload},\r\n\r\n    setAllSettings        : (state:IStore , action:IAction<ISettings>)      => { for(let key in action.payload) state.settings[key] = action.payload[key]},\r\n}\r\n\r\nexport default reducers\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}