{"ast":null,"code":"var _jsxFileName = \"H:\\\\Project\\\\version3\\\\client\\\\src\\\\Components\\\\Containers.tsx\";\nimport { Component, GlobalStyle, React } from \"../importAll\";\n\n//basic\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Div = new Component(\"\", props => {\n  if (!props.Empty) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: props.className,\n    style: GlobalStyle(props),\n    onClick: props.onClick,\n    children: props.children\n  }, props.myKey, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 13\n  }, this);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: props.children\n  }, void 0, false);\n}).Get();\n// const Img  = new Component(\"\",(props:IGlobalProps)=><img src={props.bgImg} style={GlobalStyle(props,{width:\"100%\",height:\"auto\"})} />)\n\n// const Button = memo((props:IButtonProps)=>{\n//     let {dispatch,actions} = useStore();\n//     function GoPage(event:any){\n//         if(props.toPage)    dispatch(actions.setMainPage(props.toPage))\n//         if(props.toSubPage) dispatch(actions.setSubPage(props.toSubPage))\n//         if(props.onClick)   props.onClick(event)\n//     }\n//     return <Div Flex border pointer XYcenter onClick={(x:any)=>GoPage(x)} {...props}> {props.value ||\"\"} </Div>\n// })\n\n// const Grid       = new Component(\"\", (props:IGlobalProps) => <Div Grid                  {...props}> {props.children}                     </Div>  )\n// const Container  = new Component(\"\", (props:IGlobalProps) => <Grid                      {...props}> {props.children}                     </Grid> )\n// const Main       = new Component(\"\", (props:IGlobalProps) => <Grid                      {...props}> {props.children}                     </Grid> )\n// const Footer     = new Component(\"\", (props:IGlobalProps) => <Grid                      {...props}> {props.children}                     </Grid> )\n// const Nav        = new Component(\"\", (props:IGlobalProps) => <Div                       {...props}> {props.children}                     </Div>  )\n// const Header     = new Component(\"\", (props:IGlobalProps) => <Div                       {...props}> {props.children}                     </Div>  )\n// const Aside      = new Component(\"\", (props:IGlobalProps) => <Div                       {...props}> {props.children}                     </Div>  )\n// const Box        = new Component(\"\", (props:IGlobalProps) => <Div                       {...props}> {props.children}                     </Div>  )\n// const Icon       = new Component(\"\", (props:IGlobalProps) => <Div                       {...props}> {props.children}                     </Div>  )\n// const Lable      = new Component(\"\", (props:IGlobalProps) => <Div Flex XYcenter         {...props}> {props.children}                     </Div>  )\n// const Name       = new Component(\"\", (props:IGlobalProps) => <Div Flex XYcenter         {...props}> {props.children}                     </Div>  )\n// const Flex       = new Component(\"\", (props:IGlobalProps) => <Div Flex                  {...props}> {props.children}                     </Div>  )\n// const Copyright  = new Component(\"\", (props:IGlobalProps) => <Div Flex XYcenter         {...props}> {props.value ||\"כל הזכויות שמורות\"} </Div>  )    \n// const Menu       = new Component(\"\", (props:IMenuProps  ) => <Flex spaceAround XYcenter {...props}> {props.children}</Flex>)\n// const Choice     = new Component(\"\", (props:IChiceProps ) => <Button  width={\"100px\"} height={\"70%\"} styleOverrid={props.selected?props.onSelectedStyle:null} {...props}>{props.value}</Button>)\n// const Logo       = new Component(\"\", (props:IGlobalProps) => <Img {...props} />)\n\n// const Input  = memo( React.forwardRef( (props:IInputProps,ref:any) =>{\n//     return(\n//         <Flex {...props}>\n//             <Lable height=\"max-content\">{props.value}</Lable>\n//             <input style={{height: \"max-content\"}} type={props.type} name={props.name} ref={ref} onChange={props.onChange}/>\n//             <span className=\"validation\">{props.validMgs}</span>\n//         </Flex>\n//     )\n// }))\nexport { Div };\nexport {};\nexport {};\nexport {};\nexport {};\nexport {};\nexport {};\nexport {};\nexport {};\nexport {};\nexport {};\nexport {};\nexport {};\nexport {};\nexport {};\nexport {};\nexport {};","map":{"version":3,"names":["Component","GlobalStyle","React","jsxDEV","_jsxDEV","Fragment","_Fragment","Div","props","Empty","className","style","onClick","children","myKey","fileName","_jsxFileName","lineNumber","columnNumber","Get"],"sources":["H:/Project/version3/client/src/Components/Containers.tsx"],"sourcesContent":["import { useRef } from \"react\";\r\nimport { Component, GlobalStyle, memo ,React, useStore} from \"../importAll\"\r\n\r\n\r\n//basic\r\nconst Div  = new Component(\"\",(props:IGlobalProps)=>{\r\n    if(!props.Empty)\r\n        return(\r\n            <div \r\n                className={props.className} \r\n                style={GlobalStyle(props)} \r\n                key = {props.myKey}\r\n                onClick={props.onClick}\r\n            >\r\n                {props.children}\r\n            </div>\r\n        ) \r\n        return <>{props.children}</>; \r\n}).Get();\r\n// const Img  = new Component(\"\",(props:IGlobalProps)=><img src={props.bgImg} style={GlobalStyle(props,{width:\"100%\",height:\"auto\"})} />)\r\n\r\n// const Button = memo((props:IButtonProps)=>{\r\n//     let {dispatch,actions} = useStore();\r\n//     function GoPage(event:any){\r\n//         if(props.toPage)    dispatch(actions.setMainPage(props.toPage))\r\n//         if(props.toSubPage) dispatch(actions.setSubPage(props.toSubPage))\r\n//         if(props.onClick)   props.onClick(event)\r\n//     }\r\n//     return <Div Flex border pointer XYcenter onClick={(x:any)=>GoPage(x)} {...props}> {props.value ||\"\"} </Div>\r\n// })\r\n\r\n\r\n\r\n// const Grid       = new Component(\"\", (props:IGlobalProps) => <Div Grid                  {...props}> {props.children}                     </Div>  )\r\n// const Container  = new Component(\"\", (props:IGlobalProps) => <Grid                      {...props}> {props.children}                     </Grid> )\r\n// const Main       = new Component(\"\", (props:IGlobalProps) => <Grid                      {...props}> {props.children}                     </Grid> )\r\n// const Footer     = new Component(\"\", (props:IGlobalProps) => <Grid                      {...props}> {props.children}                     </Grid> )\r\n// const Nav        = new Component(\"\", (props:IGlobalProps) => <Div                       {...props}> {props.children}                     </Div>  )\r\n// const Header     = new Component(\"\", (props:IGlobalProps) => <Div                       {...props}> {props.children}                     </Div>  )\r\n// const Aside      = new Component(\"\", (props:IGlobalProps) => <Div                       {...props}> {props.children}                     </Div>  )\r\n// const Box        = new Component(\"\", (props:IGlobalProps) => <Div                       {...props}> {props.children}                     </Div>  )\r\n// const Icon       = new Component(\"\", (props:IGlobalProps) => <Div                       {...props}> {props.children}                     </Div>  )\r\n// const Lable      = new Component(\"\", (props:IGlobalProps) => <Div Flex XYcenter         {...props}> {props.children}                     </Div>  )\r\n// const Name       = new Component(\"\", (props:IGlobalProps) => <Div Flex XYcenter         {...props}> {props.children}                     </Div>  )\r\n// const Flex       = new Component(\"\", (props:IGlobalProps) => <Div Flex                  {...props}> {props.children}                     </Div>  )\r\n// const Copyright  = new Component(\"\", (props:IGlobalProps) => <Div Flex XYcenter         {...props}> {props.value ||\"כל הזכויות שמורות\"} </Div>  )    \r\n// const Menu       = new Component(\"\", (props:IMenuProps  ) => <Flex spaceAround XYcenter {...props}> {props.children}</Flex>)\r\n// const Choice     = new Component(\"\", (props:IChiceProps ) => <Button  width={\"100px\"} height={\"70%\"} styleOverrid={props.selected?props.onSelectedStyle:null} {...props}>{props.value}</Button>)\r\n// const Logo       = new Component(\"\", (props:IGlobalProps) => <Img {...props} />)\r\n\r\n\r\n// const Input  = memo( React.forwardRef( (props:IInputProps,ref:any) =>{\r\n//     return(\r\n//         <Flex {...props}>\r\n//             <Lable height=\"max-content\">{props.value}</Lable>\r\n//             <input style={{height: \"max-content\"}} type={props.type} name={props.name} ref={ref} onChange={props.onChange}/>\r\n//             <span className=\"validation\">{props.validMgs}</span>\r\n//         </Flex>\r\n//     )\r\n// }))\r\n\r\n\r\ninterface IButtonProps extends IGlobalProps{\r\n    toPage    ?: AllMainPagesType;\r\n    toSubPage ?: AllSubPagesType;\r\n}\r\n\r\ninterface IMenuProps extends IGlobalProps{\r\n    onSelected?:React.CSSProperties;\r\n}\r\ninterface IChiceProps extends IButtonProps{\r\n    onSelectedStyle?:React.CSSProperties;\r\n    selected? : boolean;\r\n}\r\n\r\n\r\n\r\ninterface IInputProps extends IGlobalProps{\r\n    type:string;\r\n    name?:string;\r\n    ref:any;\r\n    validMgs?:any;\r\n}\r\n\r\n\r\nexport {Div}\r\nexport {}\r\nexport {}\r\nexport {}\r\nexport {}\r\nexport {}\r\nexport {}\r\nexport {}\r\nexport {}\r\nexport {}\r\nexport {}\r\nexport {}\r\nexport {}\r\nexport {}\r\nexport {}\r\nexport {}\r\nexport {}"],"mappings":";AACA,SAASA,SAAS,EAAEC,WAAW,EAAQC,KAAK,QAAiB,cAAc;;AAG3E;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AACA,MAAMC,GAAG,GAAI,IAAIP,SAAS,CAAC,EAAE,EAAEQ,KAAkB,IAAG;EAChD,IAAG,CAACA,KAAK,CAACC,KAAK,EACX,oBACIL,OAAA;IACIM,SAAS,EAAEF,KAAK,CAACE,SAAU;IAC3BC,KAAK,EAAEV,WAAW,CAACO,KAAK,CAAE;IAE1BI,OAAO,EAAEJ,KAAK,CAACI,OAAQ;IAAAC,QAAA,EAEtBL,KAAK,CAACK;EAAQ,GAHRL,KAAK,CAACM,KAAK;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAIjB,CAAC;EAEV,oBAAOd,OAAA,CAAAE,SAAA;IAAAO,QAAA,EAAGL,KAAK,CAACK;EAAQ,gBAAG,CAAC;AACpC,CAAC,CAAC,CAACM,GAAG,CAAC,CAAC;AACR;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA0BA,SAAQZ,GAAG;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}