{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// import React, { useEffect } from \"react\"\n// function GridDebug(props:any){\n//     let styles:React.CSSProperties={\n//         width:50,\n//         height:50,\n//         border:\"1px solid\",\n//         position:\"absolute\",\n//         top:20,\n//         left:2,\n//     }\n//     return(\n//         <>\n//             <div id=\"resultGrid\" style={styles} ></div>\n//             <div id=\"displayElem\" style={{...styles,top:90}} ></div>\n//         </>\n//     ) \n// }\n\n// function GridBtn({ForClassName,top}:any){\n//     let [colorbtn , setColorBtn] = React.useState<string>(\"gray\")\n//     let [count, setCount] = React.useState<number>(0)\n//     let [rows, setRows] = React.useState<number>(0)\n//     let [cols, setCols] = React.useState<number>(0)\n\n//     useEffect(()=>{\n//         if(count%2==1)\n//             setColorBtn(\"black\")\n//         else\n//             setColorBtn(\"gray\")\n//     })\n\n//     let styles :React.CSSProperties={\n//         position:\"absolute\",\n//         top:20*top,\n//         right:2,\n//         backgroundColor:colorbtn,\n//     }\n//     return(\n//         <>\n//             <button style={styles} onClick={()=>{\n//                 let elem :any= document.getElementsByClassName(ForClassName)[0]\n//                 if(!elem) alert(\"class name no valid\")\n//                 else{\n//                     let r = getNum(elem.style.gridTemplateRows?.toString());;\n//                     let c = getNum(elem.style.gridTemplateColumns?.toString()); ;\n//                     setRows(r)\n//                     setCols(c)\n//                     setCount(co=>co+1)\n//                 }\n//             }}>{ForClassName}</button>\n\n//             {count%2==1?<GDebug rows={rows} cols={cols} ForClassName={ForClassName}/>:\"\"}    \n//         </>\n//     )\n// }\n\n// function GDebug({ForClassName,rows,cols}:any){\n//     let [style , setStyle] = React.useState<React.CSSProperties>()\n//     React.useEffect(()=>{\n//         let styles :React.CSSProperties={\n//             display:\"grid\",\n//             border:\"0.2px solid\",\n//             position:\"absolute\",\n//             backgroundColor:\"azure\",\n//             opacity:\"40%\",\n//         };\n//         setTimeout(()=>{\n//             let elem :any= document.getElementsByClassName(ForClassName)[0]\n//             if(!elem) alert(\"class name no valid\")\n//             else{\n//                 styles[\"width\"] = elem.clientWidth;\n//                 styles[\"height\"] = elem.clientHeight;\n//                 styles[\"left\"] = elem.offsetLeft;\n//                 styles[\"top\"] = elem.offsetTop;\n//                 styles[\"gridTemplateRows\"] = elem.style.gridTemplateRows;\n//                 styles[\"gridTemplateColumns\"] = elem.style.gridTemplateColumns;\n//                 rows = rows;\n//                 cols = cols;\n//                 setStyle(styles)\n//             }\n//      },100)\n// },[])\n\n// if(style)\n//     return(\n//         <div style={style}>\n//             {\n//                 new Array<number>(rows).fill(1).map((i,indexI)=>{\n//                     return new Array<number>(cols).fill(1).map((j,indexJ)=>{\n//                         return(\n//                             <div\n//                                 onClick={()=>{\n//                                     let resElem = document.getElementById(\"resultGrid\");\n//                                     if(!resElem)\n//                                         alert(\"noValid\")\n//                                     else\n//                                         resElem.innerHTML += `${indexJ+1},${indexI+1}\\n`;\n\n//                                 }}\n//                                 onMouseOver={()=>{\n//                                     let disElem = document.getElementById(\"displayElem\");\n//                                     if(!disElem)\n//                                         alert(\"noValid\")\n//                                     else\n//                                         disElem.innerHTML = `${indexJ+1},${indexI+1}`;\n//                                 }}\n//                                 key={`${indexI},${indexJ}`}\n//                             ></div>\n//                         )\n//                     })\n//                 })\n//             }\n//         </div>\n//     )\n//     else \n//         return <></>\n// }\n\n// function getNum(str:string| undefined):number{\n//     if(!str) return 0;\n//     let _result = str.replace(\"repeat(\",\"\")\n//     let result = Number.parseInt(_result.replace(\",1fr)\",\"\")) \n//     if(Number.isInteger(result)){\n//         console.log(result);\n//         return result;\n//     }\n//     else{\n//         alert(\"gatNumError\");\n//         return 0;\n//     }\n// }\n// export {GridDebug ,GridBtn}\n\nfunction GridDebug(props) {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n}\n_c = GridDebug;\nfunction GridBtn({\n  ForClassName,\n  top\n}) {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n}\n_c2 = GridBtn;\nfunction GDebug({\n  ForClassName,\n  rows,\n  cols\n}) {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n}\n_c3 = GDebug;\nexport { GridDebug, GridBtn };\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"GridDebug\");\n$RefreshReg$(_c2, \"GridBtn\");\n$RefreshReg$(_c3, \"GDebug\");","map":{"version":3,"names":["GridDebug","props","_jsxDEV","_Fragment","_c","GridBtn","ForClassName","top","_c2","GDebug","rows","cols","_c3","$RefreshReg$"],"sources":["H:/Project/version3/client/src/devComponent.tsx"],"sourcesContent":["// import React, { useEffect } from \"react\"\r\n// function GridDebug(props:any){\r\n//     let styles:React.CSSProperties={\r\n//         width:50,\r\n//         height:50,\r\n//         border:\"1px solid\",\r\n//         position:\"absolute\",\r\n//         top:20,\r\n//         left:2,\r\n//     }\r\n//     return(\r\n//         <>\r\n//             <div id=\"resultGrid\" style={styles} ></div>\r\n//             <div id=\"displayElem\" style={{...styles,top:90}} ></div>\r\n//         </>\r\n//     ) \r\n// }\r\n\r\n\r\n// function GridBtn({ForClassName,top}:any){\r\n//     let [colorbtn , setColorBtn] = React.useState<string>(\"gray\")\r\n//     let [count, setCount] = React.useState<number>(0)\r\n//     let [rows, setRows] = React.useState<number>(0)\r\n//     let [cols, setCols] = React.useState<number>(0)\r\n    \r\n//     useEffect(()=>{\r\n//         if(count%2==1)\r\n//             setColorBtn(\"black\")\r\n//         else\r\n//             setColorBtn(\"gray\")\r\n//     })\r\n\r\n//     let styles :React.CSSProperties={\r\n//         position:\"absolute\",\r\n//         top:20*top,\r\n//         right:2,\r\n//         backgroundColor:colorbtn,\r\n//     }\r\n//     return(\r\n//         <>\r\n//             <button style={styles} onClick={()=>{\r\n//                 let elem :any= document.getElementsByClassName(ForClassName)[0]\r\n//                 if(!elem) alert(\"class name no valid\")\r\n//                 else{\r\n//                     let r = getNum(elem.style.gridTemplateRows?.toString());;\r\n//                     let c = getNum(elem.style.gridTemplateColumns?.toString()); ;\r\n//                     setRows(r)\r\n//                     setCols(c)\r\n//                     setCount(co=>co+1)\r\n//                 }\r\n//             }}>{ForClassName}</button>\r\n\r\n//             {count%2==1?<GDebug rows={rows} cols={cols} ForClassName={ForClassName}/>:\"\"}    \r\n//         </>\r\n//     )\r\n// }\r\n\r\n\r\n// function GDebug({ForClassName,rows,cols}:any){\r\n//     let [style , setStyle] = React.useState<React.CSSProperties>()\r\n//     React.useEffect(()=>{\r\n//         let styles :React.CSSProperties={\r\n//             display:\"grid\",\r\n//             border:\"0.2px solid\",\r\n//             position:\"absolute\",\r\n//             backgroundColor:\"azure\",\r\n//             opacity:\"40%\",\r\n//         };\r\n//         setTimeout(()=>{\r\n//             let elem :any= document.getElementsByClassName(ForClassName)[0]\r\n//             if(!elem) alert(\"class name no valid\")\r\n//             else{\r\n//                 styles[\"width\"] = elem.clientWidth;\r\n//                 styles[\"height\"] = elem.clientHeight;\r\n//                 styles[\"left\"] = elem.offsetLeft;\r\n//                 styles[\"top\"] = elem.offsetTop;\r\n//                 styles[\"gridTemplateRows\"] = elem.style.gridTemplateRows;\r\n//                 styles[\"gridTemplateColumns\"] = elem.style.gridTemplateColumns;\r\n//                 rows = rows;\r\n//                 cols = cols;\r\n//                 setStyle(styles)\r\n//             }\r\n//      },100)\r\n// },[])\r\n\r\n// if(style)\r\n//     return(\r\n//         <div style={style}>\r\n//             {\r\n//                 new Array<number>(rows).fill(1).map((i,indexI)=>{\r\n//                     return new Array<number>(cols).fill(1).map((j,indexJ)=>{\r\n//                         return(\r\n//                             <div\r\n//                                 onClick={()=>{\r\n//                                     let resElem = document.getElementById(\"resultGrid\");\r\n//                                     if(!resElem)\r\n//                                         alert(\"noValid\")\r\n//                                     else\r\n//                                         resElem.innerHTML += `${indexJ+1},${indexI+1}\\n`;\r\n                                        \r\n//                                 }}\r\n//                                 onMouseOver={()=>{\r\n//                                     let disElem = document.getElementById(\"displayElem\");\r\n//                                     if(!disElem)\r\n//                                         alert(\"noValid\")\r\n//                                     else\r\n//                                         disElem.innerHTML = `${indexJ+1},${indexI+1}`;\r\n//                                 }}\r\n//                                 key={`${indexI},${indexJ}`}\r\n//                             ></div>\r\n//                         )\r\n//                     })\r\n//                 })\r\n//             }\r\n//         </div>\r\n//     )\r\n//     else \r\n//         return <></>\r\n// }\r\n\r\n\r\n// function getNum(str:string| undefined):number{\r\n//     if(!str) return 0;\r\n//     let _result = str.replace(\"repeat(\",\"\")\r\n//     let result = Number.parseInt(_result.replace(\",1fr)\",\"\")) \r\n//     if(Number.isInteger(result)){\r\n//         console.log(result);\r\n//         return result;\r\n//     }\r\n//     else{\r\n//         alert(\"gatNumError\");\r\n//         return 0;\r\n//     }\r\n// }\r\n// export {GridDebug ,GridBtn}\r\n\r\n\r\nfunction GridDebug(props:any){return<></>}\r\nfunction GridBtn({ForClassName,top}:any){return <></>}\r\nfunction GDebug({ForClassName,rows,cols}:any){return <></>}\r\nexport {GridDebug ,GridBtn}\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,SAASA,SAASA,CAACC,KAAS,EAAC;EAAC,oBAAMC,OAAA,CAAAC,SAAA,mBAAI,CAAC;AAAA;AAACC,EAAA,GAAjCJ,SAAS;AAClB,SAASK,OAAOA,CAAC;EAACC,YAAY;EAACC;AAAO,CAAC,EAAC;EAAC,oBAAOL,OAAA,CAAAC,SAAA,mBAAI,CAAC;AAAA;AAACK,GAAA,GAA7CH,OAAO;AAChB,SAASI,MAAMA,CAAC;EAACH,YAAY;EAACI,IAAI;EAACC;AAAQ,CAAC,EAAC;EAAC,oBAAOT,OAAA,CAAAC,SAAA,mBAAI,CAAC;AAAA;AAACS,GAAA,GAAlDH,MAAM;AACf,SAAQT,SAAS,EAAEK,OAAO;AAAC,IAAAD,EAAA,EAAAI,GAAA,EAAAI,GAAA;AAAAC,YAAA,CAAAT,EAAA;AAAAS,YAAA,CAAAL,GAAA;AAAAK,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}