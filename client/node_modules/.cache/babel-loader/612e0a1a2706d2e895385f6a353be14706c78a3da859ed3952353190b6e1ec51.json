{"ast":null,"code":"var _jsxFileName = \"H:\\\\Project\\\\version3\\\\client\\\\src\\\\Components\\\\Game\\\\Inventory.tsx\",\n  _s = $RefreshSig$();\nimport { Grid, memo, useSelector, Lable, useState, Div, RandomString, React } from \"../../importAll\";\n// import { GetGirlImg } from \"../../../../Images/Images\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Inventory = _s(memo(_c = _s(props => {\n  _s();\n  let settings = useSelector(store => store.settings);\n  let activeAvatar = useSelector(store => store.activeAvatar);\n  let [category, setCategory] = useState(\"hat\");\n  console.log(props.items);\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    ...props,\n    rows: 5,\n    cols: 4,\n    children: [/*#__PURE__*/_jsxDEV(Lable, {\n      border: true,\n      onClick: () => setCategory(\"hat\"),\n      children: \"\\u05DB\\u05D5\\u05D1\\u05E2\\u05D9\\u05DD\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Lable, {\n      border: true,\n      onClick: () => setCategory(\"shirt\"),\n      children: \"\\u05D7\\u05D5\\u05DC\\u05E6\\u05D5\\u05EA\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Lable, {\n      border: true,\n      onClick: () => setCategory(\"pants\"),\n      children: \"\\u05DE\\u05DB\\u05E0\\u05E1\\u05D9\\u05D9\\u05DD\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Lable, {\n      border: true,\n      onClick: () => setCategory(\"shoes\"),\n      children: \"\\u05E0\\u05E2\\u05DC\\u05D9\\u05D9\\u05DD\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 13\n    }, this), props.items.map(item => {\n      if (item.categoryItem == category) return /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: /*#__PURE__*/_jsxDEV(Div, {\n          children: item.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 25\n        }, this)\n      }, RandomString(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 22\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 9\n  }, this);\n}, \"7iHCl2ZwNyFpbT/B49YL9BFhJWM=\", false, function () {\n  return [useSelector, useSelector];\n})), \"7iHCl2ZwNyFpbT/B49YL9BFhJWM=\", false, function () {\n  return [useSelector, useSelector];\n});\n_c2 = Inventory;\nexport default Inventory;\n\n// const girl  = GetGirlImg('girlAvatar')\n// const shirt = GetGirlImg('shirt/shirt4')\n// const shoes = GetGirlImg('/shoes1')\n// const pants = GetGirlImg('/pants1')\n\n// const AvatarCreatorView = memo((props:IAvatarCreatorViewProps)=>{\n\n//     \n//     \n//     \n//     \n//     \n\n//     return(\n//         <Grid  grid=\"30,30\" {...props} >\n//             <Name  fSize=\"150%\" position=\"1,2|30,4\">{props.name||\"avatar name\"}</Name>\n//             <Grid className=\"view\" grid={AVATAR_VIEW_GRID} position=\"1,6|30,30\" >\n//                 <Avatar src={girl}  zIndex={1} position={AVATAR_BODY_POSITION} />\n//                 <Cloth  src={shirt} zIndex={3} position={SHIRT_POSITION } />\n//                 <Cloth  src={shoes} zIndex={4} position={SHOES_POSITION } />\n//                 <Cloth  src={pants} zIndex={2} position={PANTS_POSITION} />\n//             </Grid>\n//         </Grid>\n//     )\n// })\n\n// interface IAvatarCreatorViewProps extends IGlobalProps{\n//     gender : \"boy\"|\"girl\";\n//     name? : \"string\";\n// }\n\n// export  AvatarCreatorView\n\n// const CreateAvatarInventory = memo((props:ICreateAvatarInventoryProps)=>{\n//     let [category , setCategory] = useState<any>(\"hat\")\n\n//     return(\n//         <>\n//             <Grid rows={1} cols={5}>\n//                 <Name onClick={()=>{setCategory(\"hat\")}}>כובע</Name>\n//                 <Name onClick={()=>{setCategory(\"\")}}>חולצה</Name>\n//                 <Name onClick={()=>{setCategory(\"\")}}>מכנסיים</Name>\n//                 <Name onClick={()=>{setCategory(\"\")}}>נעליים</Name>\n//             </Grid>\n\n//             <Grid rows={5} cols={5}>\n//                 {\n//                     props.items.map(item=>{\n//                         if(item.categoryItem !== category) return <></>\n//                         return (\n//                             <Div>\n//                                 <Name>{item.name}</Name>\n//                             </Div>\n//                         )\n\n//                     })\n//                 }\n//             </Grid>\n//         </>\n//     )\n// })\n\n// interface ICreateAvatarInventoryProps extends IGlobalProps{\n//     items : ItemClient[];\n// }\n\n// export  CreateAvatarInventory;\nvar _c, _c2;\n$RefreshReg$(_c, \"Inventory$memo\");\n$RefreshReg$(_c2, \"Inventory\");","map":{"version":3,"names":["Grid","memo","useSelector","Lable","useState","Div","RandomString","React","jsxDEV","_jsxDEV","Inventory","_s","_c","props","settings","store","activeAvatar","category","setCategory","console","log","items","rows","cols","children","border","onClick","fileName","_jsxFileName","lineNumber","columnNumber","map","item","categoryItem","Fragment","name","_c2","$RefreshReg$"],"sources":["H:/Project/version3/client/src/Components/Game/Inventory.tsx"],"sourcesContent":["import {Avatar,Grid,Name, memo, useSelector ,Cloth, AvatarClient, Lable, useState, ItemClient, Div, RandomString, React} from \"../../importAll\";\r\n// import { GetGirlImg } from \"../../../../Images/Images\";\r\n\r\nconst Inventory = memo((props: IInventoryProps)=>{\r\n\r\n    let settings      = useSelector<IStore,ISettings>(store=>store.settings)\r\n    let activeAvatar  = useSelector<IStore,AvatarClient>(store=>store.activeAvatar);\r\n    let [category , setCategory] = useState<\"hat\"|\"shirt\"|\"shoes\"|\"pants\">(\"hat\")\r\n\r\n    \r\n    console.log(props.items)\r\n    return(\r\n        <Grid {...props} rows={5} cols={4}> \r\n            <Lable border onClick={()=>setCategory(\"hat\")}>כובעים</Lable>\r\n            <Lable border onClick={()=>setCategory(\"shirt\")}>חולצות</Lable>\r\n            <Lable border onClick={()=>setCategory(\"pants\")}>מכנסיים</Lable>\r\n            <Lable border onClick={()=>setCategory(\"shoes\")}>נעליים</Lable>\r\n\r\n            {\r\n                props.items.map(item=>{\r\n                    if(item.categoryItem == category)\r\n                    return (\r\n                     <React.Fragment key={RandomString()}>\r\n                        <Div>\r\n                            {item.name}\r\n                        </Div>\r\n                     </React.Fragment>\r\n                    )\r\n                })\r\n            }\r\n        </Grid>\r\n    )\r\n\r\n})\r\n\r\ninterface IInventoryProps extends IGlobalProps{\r\n    items: ItemClient[];\r\n}\r\nexport default Inventory;\r\n\r\n// const girl  = GetGirlImg('girlAvatar')\r\n// const shirt = GetGirlImg('shirt/shirt4')\r\n// const shoes = GetGirlImg('/shoes1')\r\n// const pants = GetGirlImg('/pants1')\r\n\r\n\r\n\r\n\r\n\r\n// const AvatarCreatorView = memo((props:IAvatarCreatorViewProps)=>{\r\n\r\n//     \r\n//     \r\n//     \r\n//     \r\n//     \r\n    \r\n//     return(\r\n//         <Grid  grid=\"30,30\" {...props} >\r\n//             <Name  fSize=\"150%\" position=\"1,2|30,4\">{props.name||\"avatar name\"}</Name>\r\n//             <Grid className=\"view\" grid={AVATAR_VIEW_GRID} position=\"1,6|30,30\" >\r\n//                 <Avatar src={girl}  zIndex={1} position={AVATAR_BODY_POSITION} />\r\n//                 <Cloth  src={shirt} zIndex={3} position={SHIRT_POSITION } />\r\n//                 <Cloth  src={shoes} zIndex={4} position={SHOES_POSITION } />\r\n//                 <Cloth  src={pants} zIndex={2} position={PANTS_POSITION} />\r\n//             </Grid>\r\n//         </Grid>\r\n//     )\r\n// })\r\n\r\n\r\n// interface IAvatarCreatorViewProps extends IGlobalProps{\r\n//     gender : \"boy\"|\"girl\";\r\n//     name? : \"string\";\r\n// }\r\n\r\n// export  AvatarCreatorView\r\n\r\n\r\n\r\n// const CreateAvatarInventory = memo((props:ICreateAvatarInventoryProps)=>{\r\n//     let [category , setCategory] = useState<any>(\"hat\")\r\n\r\n\r\n//     return(\r\n//         <>\r\n//             <Grid rows={1} cols={5}>\r\n//                 <Name onClick={()=>{setCategory(\"hat\")}}>כובע</Name>\r\n//                 <Name onClick={()=>{setCategory(\"\")}}>חולצה</Name>\r\n//                 <Name onClick={()=>{setCategory(\"\")}}>מכנסיים</Name>\r\n//                 <Name onClick={()=>{setCategory(\"\")}}>נעליים</Name>\r\n//             </Grid>\r\n\r\n//             <Grid rows={5} cols={5}>\r\n//                 {\r\n//                     props.items.map(item=>{\r\n//                         if(item.categoryItem !== category) return <></>\r\n//                         return (\r\n//                             <Div>\r\n//                                 <Name>{item.name}</Name>\r\n//                             </Div>\r\n//                         )\r\n                        \r\n//                     })\r\n//                 }\r\n//             </Grid>\r\n//         </>\r\n//     )\r\n// })\r\n\r\n\r\n// interface ICreateAvatarInventoryProps extends IGlobalProps{\r\n//     items : ItemClient[];\r\n// }\r\n\r\n// export  CreateAvatarInventory;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}