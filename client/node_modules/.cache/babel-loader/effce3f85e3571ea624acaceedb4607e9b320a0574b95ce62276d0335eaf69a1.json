{"ast":null,"code":"import { ConvertPoint } from \"../../importAll\";\nlet colorCounter = 0;\nlet bgcounter = 0;\nlet colors = [\"black\", \"red\", \"green\", \"blue\", \"yellow\"];\nlet backgrouds = (x, count) => {\n  console.log(typeof x);\n  if (typeof x == \"string\") {\n    return x;\n  }\n  let backgrouds = [\"pink\", \"red\", \"green\", \"blue\", \"yellow\"];\n  return backgrouds[count];\n};\nfunction GlobalStyle(_props, _display, obj) {\n  let props;\n  if (obj) props = {\n    ..._props,\n    ...obj\n  };else props = {\n    ..._props\n  };\n  let result = {\n    backgroundSize: \"contain\",\n    backgroundRepeat: `no-repeat`\n  };\n  if (_display) result[\"display\"] = _display;\n  if (props.XYcenter) {\n    result[\"justifyContent\"] = \"center\";\n    result[\"alignItems\"] = \"center\";\n  }\n  if (props.Xcenter) result[\"justifyContent\"] = \"center\";\n  if (props.Xcenter) result[\"alignItems\"] = \"center\";\n  if (props.border && typeof props.border == \"boolean\") result[\"border\"] = `1px solid ${colors[colorCounter++ % 5]}`;else if (props.border && typeof props.border == \"string\") result[\"border\"] = props.border;\n  if (props.width) result[\"width\"] = props.width;\n  if (props.height) result[\"height\"] = props.height;\n  if (props.marginTop) result[\"marginTop\"] = props.marginTop;\n  if (props.marginLeft) result[\"marginLeft\"] = props.marginLeft;\n  if (props.marginRight) result[\"marginRight\"] = props.marginRight;\n  if (props.marginBottom) result[\"marginBottom\"] = props.marginBottom;\n  if (props.margin) result[\"margin\"] = props.margin;\n  if (props.paddingTop) result[\"paddingTop\"] = props.paddingTop;\n  if (props.paddingLeft) result[\"paddingLeft\"] = props.paddingLeft;\n  if (props.paddingRight) result[\"paddingRight\"] = props.paddingRight;\n  if (props.paddingBottom) result[\"paddingBottom\"] = props.paddingBottom;\n  if (props.padding) result[\"padding\"] = props.padding;\n  if (props.align) result[\"textAlign\"] = props.align;\n  if (props.rows) result[\"gridTemplateRows\"] = `repeat(${props.rows},1fr)`;\n  if (props.columns) result[\"gridTemplateColumns\"] = `repeat(${props.columns},1fr)`;\n  if (props.cols) result[\"gridTemplateColumns\"] = `repeat(${props.cols},1fr)`;\n  if (props.grid) {\n    let point = ConvertPoint(props.grid);\n    result[\"gridTemplateColumns\"] = `repeat(${point[0]},1fr)`;\n    result[\"gridTemplateRows\"] = `repeat(${point[1]},1fr)`;\n  }\n  if (props.Grid) {\n    result[\"gridTemplateColumns\"] = `repeat(${point[0]},1fr)`;\n    result[\"gridTemplateRows\"] = `repeat(${point[1]},1fr)`;\n  }\n  if (props.rtl) result[\"direction\"] = \"rtl\";\n  if (props.ltr) result[\"direction\"] = \"ltr\";\n  if (props.fSize) result[\"fontSize\"] = props.fSize;\n  if (props.underline) result[\"textDecoration\"] = \"underline\";\n  if (props.start && props.end) {\n    result[\"gridColumn\"] = `${ConvertPoint(props.start)[0]}/${ConvertPoint(props.end)[0]}`;\n    result[\"gridRow\"] = `${ConvertPoint(props.start)[1]}/${ConvertPoint(props.end)[1]}`;\n  }\n  if (props.position) {\n    let start = props.position.split(\"|\")[0];\n    let end = props.position.split(\"|\")[1];\n    result[\"gridColumn\"] = `${ConvertPoint(start)[0]}/${ConvertPoint(end)[0]}`;\n    result[\"gridRow\"] = `${ConvertPoint(start)[1]}/${ConvertPoint(end)[1]}`;\n  }\n  if (props.family) result[\"fontFamily\"] = props.family;\n  if (props.flexDirection) result[\"flexDirection\"] = props.flexDirection;\n  if (props.scroll) result[\"overflow\"] = \"auto\";\n  if (props.wrap) result[\"flexWrap\"] = \"wrap\";\n  if (props.bgColor && typeof props.bgColor == \"boolean\") result[\"backgroundColor\"] = `${backgrouds(props.bgColor, bgcounter++ % 5)}`;else if (props.bgColor && typeof props.bgColor == \"string\") result[\"backgroundColor\"] = props.bgColor;\n  if (props.bgImg) result[\"backgroundImage\"] = `url(${props.bgImg})`;\n  return result;\n}\n_c = GlobalStyle;\nexport default GlobalStyle;\nvar _c;\n$RefreshReg$(_c, \"GlobalStyle\");","map":{"version":3,"names":["ConvertPoint","colorCounter","bgcounter","colors","backgrouds","x","count","console","log","GlobalStyle","_props","_display","obj","props","result","backgroundSize","backgroundRepeat","XYcenter","Xcenter","border","width","height","marginTop","marginLeft","marginRight","marginBottom","margin","paddingTop","paddingLeft","paddingRight","paddingBottom","padding","align","rows","columns","cols","grid","point","Grid","rtl","ltr","fSize","underline","start","end","position","split","family","flexDirection","scroll","wrap","bgColor","bgImg","_c","$RefreshReg$"],"sources":["H:/Project/version3/client/src/Components/Global/GlobalStyle.ts"],"sourcesContent":["import { count } from \"console\";\r\nimport { ConvertPoint } from \"../../importAll\";\r\n\r\nlet colorCounter = 0\r\nlet bgcounter = 0\r\nlet colors =[\r\n    \"black\",\"red\",\"green\",\"blue\",\"yellow\"\r\n];\r\n\r\nlet backgrouds = (x:string | boolean , count:number):any =>{\r\n    console.log(typeof x )\r\n    if(typeof x == \"string\"){\r\n        return x;\r\n    }\r\n    let backgrouds = [\"pink\",\"red\",\"green\",\"blue\",\"yellow\"]\r\n    return backgrouds[count]\r\n}\r\n\r\nfunction GlobalStyle(_props:IGlobalProps ,_display?:string , obj?:IGlobalProps ){\r\n    let props;\r\n    if(obj)\r\n        props = {..._props , ...obj};\r\n    else\r\n        props = {..._props};\r\n\r\n    let result :React.CSSProperties={\r\n        backgroundSize        :\"contain\",\r\n        backgroundRepeat      :`no-repeat`,\r\n    };\r\n\r\n\r\n    if (_display)\r\n        result[\"display\"] = _display;\r\n    if (props.XYcenter){\r\n        result[\"justifyContent\"] = \"center\";\r\n        result[\"alignItems\"]     = \"center\";\r\n    }\r\n    if (props.Xcenter)\r\n        result[\"justifyContent\"] = \"center\";\r\n    if (props.Xcenter)\r\n        result[\"alignItems\"] = \"center\";\r\n\r\n    if (props.border && typeof props.border == \"boolean\")\r\n        result[\"border\"] = `1px solid ${colors[colorCounter++%5]}`\r\n    else if (props.border && typeof props.border == \"string\")\r\n        result[\"border\"] = props.border\r\n\r\n    if (props.width)\r\n        result[\"width\"] = props.width;\r\n    if (props.height)\r\n        result[\"height\"] = props.height;\r\n\r\n    if (props.marginTop)\r\n        result[\"marginTop\"] = props.marginTop;\r\n    if (props.marginLeft)\r\n        result[\"marginLeft\"] = props.marginLeft;\r\n    if (props.marginRight)\r\n        result[\"marginRight\"] = props.marginRight;\r\n    if (props.marginBottom)\r\n        result[\"marginBottom\"] = props.marginBottom;\r\n    if (props.margin)\r\n        result[\"margin\"] = props.margin;\r\n\r\n    if (props.paddingTop)\r\n        result[\"paddingTop\"] = props.paddingTop;\r\n    if (props.paddingLeft)\r\n        result[\"paddingLeft\"] = props.paddingLeft;\r\n    if (props.paddingRight)\r\n        result[\"paddingRight\"] = props.paddingRight;\r\n    if (props.paddingBottom)\r\n        result[\"paddingBottom\"] = props.paddingBottom;\r\n    if (props.padding)\r\n        result[\"padding\"] = props.padding;\r\n\r\n    if (props.align)\r\n        result[\"textAlign\"] = props.align;\r\n\r\n        \r\n    if (props.rows)\r\n        result[\"gridTemplateRows\"] = `repeat(${props.rows},1fr)`;\r\n    if (props.columns)\r\n        result[\"gridTemplateColumns\"] = `repeat(${props.columns},1fr)`;\r\n    if (props.cols)\r\n        result[\"gridTemplateColumns\"] = `repeat(${props.cols},1fr)`;\r\n    if(props.grid){\r\n        let point = ConvertPoint(props.grid)\r\n        result[\"gridTemplateColumns\"] = `repeat(${point[0]},1fr)`;\r\n        result[\"gridTemplateRows\"]    = `repeat(${point[1]},1fr)`;\r\n    }\r\n    if(props.Grid){\r\n        result[\"gridTemplateColumns\"] = `repeat(${point[0]},1fr)`;\r\n        result[\"gridTemplateRows\"]    = `repeat(${point[1]},1fr)`;\r\n    }\r\n\r\n    if (props.rtl)\r\n        result[\"direction\"] = \"rtl\";\r\n    if (props.ltr)\r\n        result[\"direction\"] = \"ltr\";\r\n\r\n    if (props.fSize)\r\n        result[\"fontSize\"] = props.fSize;\r\n\r\n\r\n    if (props.underline)\r\n        result[\"textDecoration\"] = \"underline\";\r\n\r\n    if (props.start && props.end){\r\n        result[\"gridColumn\"] = `${ConvertPoint(props.start)[0]}/${ConvertPoint(props.end)[0]}`;\r\n        result[\"gridRow\"]    = `${ConvertPoint(props.start)[1]}/${ConvertPoint(props.end)[1]}`;\r\n    }\r\n\r\n    if (props.position){\r\n        let start = props.position.split(\"|\")[0];\r\n        let end = props.position.split(\"|\")[1];\r\n        result[\"gridColumn\"] = `${ConvertPoint(start)[0]}/${ConvertPoint(end)[0]}`;\r\n        result[\"gridRow\"]    = `${ConvertPoint(start)[1]}/${ConvertPoint(end)[1]}`;\r\n    }\r\n\r\n\r\n    if (props.family)\r\n        result[\"fontFamily\"] = props.family;\r\n\r\n    if (props.flexDirection)\r\n        result[\"flexDirection\"] = props.flexDirection;\r\n\r\n    if (props.scroll)\r\n        result[\"overflow\"] = \"auto\";\r\n\r\n    if (props.wrap)\r\n        result[\"flexWrap\"] = \"wrap\";\r\n\r\n\r\n    if (props.bgColor && typeof props.bgColor == \"boolean\")\r\n        result[\"backgroundColor\"] = `${backgrouds(props.bgColor,bgcounter++%5)}`;\r\n    else if (props.bgColor && typeof props.bgColor == \"string\")\r\n        result[\"backgroundColor\"] = props.bgColor;\r\n\r\n    if (props.bgImg)\r\n        result[\"backgroundImage\"] = `url(${props.bgImg})`;\r\n\r\n\r\n    return result;\r\n}\r\n\r\n\r\n\r\n\r\nexport default GlobalStyle;\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}