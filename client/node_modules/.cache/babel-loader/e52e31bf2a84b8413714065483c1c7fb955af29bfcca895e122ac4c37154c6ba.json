{"ast":null,"code":"import { UserClient } from \"../importAll\";\nconst reducers = {\n  setIsLogin: (state, action) => {\n    state.isLogin = action.payload;\n    if (action.payload == true) state.mainPage = \"Game\";else {\n      state.mainPage = \"Guest\";\n      state.subPage = \"Guest-Home\";\n      UserClient.KillToken();\n    }\n  },\n  setUser: (state, action) => {\n    state.user = action.payload;\n  },\n  setMainPage: (state, action) => {\n    state.mainPage = action.payload;\n    if (action.payload == \"Game\") state.subPage = \"Game-SelectAvatar\";\n    if (action.payload == \"Guest\") state.subPage = \"Guest-Home\";\n  },\n  setSubPage: (state, action) => {\n    state.subPage = action.payload;\n  },\n  setActiveAvatar: (state, action) => {},\n  setAllAvatars: (state, action) => {\n    state.allAvatars = action.payload;\n  },\n  setAvatarName: (state, action) => {\n    state.avatarName = action.payload;\n  },\n  setAvatarExp: (state, action) => {\n    state.avatarExp = action.payload;\n  },\n  setAvatarHp: (state, action) => {\n    state.avatarHp = action.payload;\n  },\n  setAvatarDamage: (state, action) => {\n    state.avatarDamage = action.payload;\n  },\n  setAvatarEnergy: (state, action) => {\n    state.avatarEnergy = action.payload;\n  },\n  setAvatarRefillEnergy: (state, action) => {\n    state.avatarRefillEnergy = action.payload;\n  },\n  setAvatarSilver: (state, action) => {\n    state.avatarSilver = action.payload;\n  },\n  setAvatarGold: (state, action) => {\n    state.avatarGold = action.payload;\n  },\n  setAvatarRedPowder: (state, action) => {\n    state.avatarRedPowder = action.payload;\n  },\n  setAvatarDiamond: (state, action) => {\n    state.avatarDiamond = action.payload;\n  },\n  setMusic: (state, action) => {\n    state.music = action.payload;\n  },\n  setSound: (state, action) => {\n    state.sound = action.payload;\n  },\n  setAllSettings: (state, action) => {\n    for (let key in action.payload) state.settings[key] = action.payload[key];\n  }\n};\nexport default reducers;","map":{"version":3,"names":["UserClient","reducers","setIsLogin","state","action","isLogin","payload","mainPage","subPage","KillToken","setUser","user","setMainPage","setSubPage","setActiveAvatar","setAllAvatars","allAvatars","setAvatarName","avatarName","setAvatarExp","avatarExp","setAvatarHp","avatarHp","setAvatarDamage","avatarDamage","setAvatarEnergy","avatarEnergy","setAvatarRefillEnergy","avatarRefillEnergy","setAvatarSilver","avatarSilver","setAvatarGold","avatarGold","setAvatarRedPowder","avatarRedPowder","setAvatarDiamond","avatarDiamond","setMusic","music","setSound","sound","setAllSettings","key","settings"],"sources":["H:/Project/version3/client/src/Store/redusers.ts"],"sourcesContent":["import { AvatarClient, UserClient } from \"../importAll\";\r\n\r\nconst reducers = {\r\n    setIsLogin : (state:IStore , action:IAction<boolean>)=>{\r\n        state.isLogin   = action.payload;\r\n        if(action.payload == true)\r\n            state.mainPage  = \"Game\";\r\n        else{\r\n            state.mainPage  = \"Guest\";\r\n            state.subPage   = \"Guest-Home\";\r\n            UserClient.KillToken();\r\n        }\r\n    },\r\n    setUser     : (state:IStore , action:IAction<UserClient>)       => {state.user     = action.payload},\r\n    setMainPage : (state:IStore , action:IAction<AllMainPagesType>) => {\r\n        state.mainPage = action.payload;\r\n        if(action.payload == \"Game\")\r\n            state.subPage  = \"Game-SelectAvatar\"\r\n        if(action.payload == \"Guest\")\r\n            state.subPage  = \"Guest-Home\"\r\n    },\r\n    setSubPage  : (state:IStore , action:IAction<AllSubPagesType>)   => {state.subPage  = action.payload},\r\n    setActiveAvatar       : (state:IStore , action:IAction<AvatarClient>) => {},\r\n    setAllAvatars         : (state:IStore , action:IAction<AvatarClient[]>) => {state.allAvatars           = action.payload},\r\n    setAvatarName         : (state:IStore , action:IAction<string>)         => {state.avatarName           = action.payload},\r\n    setAvatarExp          : (state:IStore , action:IAction<number>)         => {state.avatarExp            = action.payload},\r\n    setAvatarHp           : (state:IStore , action:IAction<number>)         => {state.avatarHp             = action.payload},\r\n    setAvatarDamage       : (state:IStore , action:IAction<number>)         => {state.avatarDamage         = action.payload},\r\n    setAvatarEnergy       : (state:IStore , action:IAction<number>)         => {state.avatarEnergy         = action.payload},\r\n    setAvatarRefillEnergy : (state:IStore , action:IAction<number>)         => {state.avatarRefillEnergy   = action.payload},\r\n    setAvatarSilver       : (state:IStore , action:IAction<number>)         => {state.avatarSilver         = action.payload},\r\n    setAvatarGold         : (state:IStore , action:IAction<number>)         => {state.avatarGold           = action.payload},\r\n    setAvatarRedPowder    : (state:IStore , action:IAction<number>)         => {state.avatarRedPowder      = action.payload},\r\n    setAvatarDiamond      : (state:IStore , action:IAction<number>)         => {state.avatarDiamond        = action.payload},\r\n    setMusic              : (state:IStore , action:IAction<boolean>)        => {state.music                = action.payload},\r\n    setSound              : (state:IStore , action:IAction<boolean>)        => {state.sound                = action.payload},\r\n\r\n    setAllSettings        : (state:IStore , action:IAction<IClientSettings & IGlobalSettings>)       => { for(let key in action.payload) state.settings[key] = action.payload[key]},\r\n}\r\n\r\nexport default reducers\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}